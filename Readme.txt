SpliceView
Written by Yafeng Zhu. Email: yafeng.zhu@scilifelab.se
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Overview SpliceView is a tool for identifcation and visualization of splice variants based on shotgun proteomics data

SpliceView was written in Python 2.7.2. It consists of four scripts: converter.py, download.py, mapping.py and visualization.py. They are compressed into a package. The following python packages need to be installed for SpliceView to work: Biopython Python Image Library (PIL) PyCogent (pycogent.sourceforge.net)

Manual Extract the SpliceView package and copy PQPQ output file to the decompressed directory. The package contains files Homo_sapiens.GRCh37.63.pep.all.fa (Ensembl 63 protein database) and proteincoding_genesymbol.txt (Ensembl gene ID and gene symbol). These pre-downloaded files will be used in data preprocess step. Note: DO NOT move or rename output files generated by SpliceView.

Here, we will use the A431_heavy.txt file (PQPQ output file for heavy fraction of A431 cell line) to illustrate the workflow.

Read and preprocess output file from PQPQ - converter.py The first step is to extract necessary information from PQPQ output which includes protein accession id, peptide sequence, quantitative data and cluster. Each protein entry will be assigned a gene symbol which will be used to retrieve its known splice variants in the next step. This is done by converter.py.
Command: Python converter.py A431_heavy.txt A431_heavy

The first argument is the input file, the second is the prefix of output file. You will get an output file named as A431_heavy_pepdata.txt. 2. Download data from EVDB and GenBank - download.py The script in this step retrieves splice variants in EVDB by gene symbol and the translated sequences of these splice variants in GenBank.

Command: Python download.py sample Output: splicingvar.txt, subexon.txt, varseq.fa, gene_notfound.txt, var_notfound.txt.

The output files splicingvar.txt and subexon.txt contain exon composition of each variant, both genomic and transcript coordinates. The gene_notfound.txt file contains gene symbol which is not found in the splicing variants database. The var_notfound.txt file contains mRNA accession id of splice variants that is not found in GenBank.

Tip: if you have multiple sample files in one project, it is better to put all the files under one directory named by the project and use different sample names for each file. Because usually the majority of identified proteins does not differ so much among different samples, the script download.py first check if the splice variants of identified protein and the variant sequences have been downloaded so that it avoids downloading the data for same proteins multiple times.

Map peptides to its transcriptional position - mapping.py The script in this step uses output from step 1 and step 2 to map identified peptides to its transcriptional positions.
Command: Python mapping.py sample Output: sample_mappingout.txt, sample_genestatistic.txt

The file mappingout.txt is PSM based format in which each row is one PSM. It will be used in the visualization part. The file Genestatistic.txt is gene based format in which each row is one gene. It is used to filter out genes of interest.

Create figure - visualization.py The script is used to visualize the gene of interest. Given a gene symbol, it will generate a high quality picture with all important information described in the paper.
Command: Python visualization.py sample genesymbol

The gene symbol should be exactly the same as the one you see in the file genestatistic.txt
